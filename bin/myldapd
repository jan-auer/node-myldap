#!/usr/bin/env node

var fs = require('fs');
var exec = require('child_process').exec;
var pidfile = process.cwd() + '/.pid';
var argsfile = process.cwd() + '/.args';

var BIN_PATH = __dirname + '/myldap ';
var EXIT_CODE_SUCCESS = 0;
var EXIT_CODE_ERROR   = 1;

launch(process.argv[2]);

function launch(command) {
	switch (command) {
		case 'start': 
			start(getArgs()); 
			break;
		case 'stop': 
			stop(); 
			break;
		case 'restart':
			restart();
			break;
		default:
			throw Error('This command is not supported: ', command);
	}
}

function start(args) {
	if (load(pidfile)) {
		console.log('MyLDAP is already running.');
		return;
	}

	var child = exec('/usr/bin/env node ' + BIN_PATH + args, function (error, stdout, stderr) {
		if (error) {
			console.log(stderr);
			process.exit(EXIT_CODE_ERROR);
		}
	});

	// TODO: don't use a timeout to determine whether the server has started successfully.
	setTimeout(function () {
		save(pidfile, child.pid);
		save(argsfile, args);
		console.log('MyLDAP started successfully.');
		process.exit(EXIT_CODE_SUCCESS);
	}, 3000);
}

function stop() {
	var pid = load(pidfile);
	if (!pid) {
		console.log('MyLDAP is not running.');
		return;
	}

	process.kill(pid);
	save(pidfile, 0);
	save(argsfile, '');

	console.log('MyLDAP stopped successfully.');
}

function restart() {
	var args = load(argsfile) || '';
	stop();
	start(args);
}

function load(filename) {
	return fs.existsSync(pidfile) ? fs.readFileSync(pidfile) : false;
}

function save(filename, value) {
	fs.writeFileSync(filename, value);
}

function getArgs() {
	return Array.prototype.slice.call(process.argv, 3);
}